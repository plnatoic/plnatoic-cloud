{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/phamnhat/Documents/plnatoic-cloud/src/lib/posts.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport { remark } from 'remark';\nimport html from 'remark-html';\n\nconst postsDirectory = path.join(process.cwd(), 'content/blogs');\n\nexport function getSortedPostsData() {\n  // Get file names under /content/blogs\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map((fileName) => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '');\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    // Combine the data with the id\n    return {\n      id,\n      ...(matterResult.data as { date: string; title: string }),\n    };\n  });\n  // Sort posts by date\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, ''),\n      },\n    };\n  });\n}\n\nexport async function getPostData(id: string) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents);\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content);\n  const contentHtml = processedContent.toString();\n\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...(matterResult.data as { date: string; title: string }),\n  };\n}\n\nexport function createPost({ title, date, content }: { title: string; date: string; content: string }) {\n    const id = title.toLowerCase().replace(/\\s+/g, '-');\n    const fullPath = path.join(postsDirectory, `${id}.md`);\n\n    const fileContent = `---\ntitle: '${title}'\ndate: '${date}'\n---\n\n${content}`;\n\n    fs.writeFileSync(fullPath, fileContent);\n\n    return { id };\n}\n\nexport function updatePost(id: string, { title, date, content }: { title: string; date: string; content: string }) {\n    const fullPath = path.join(postsDirectory, `${id}.md`);\n\n    const fileContent = `---\ntitle: '${title}'\ndate: '${date}'\n---\n\n${content}`;\n\n    fs.writeFileSync(fullPath, fileContent);\n\n    return { id };\n}\n\nexport function deletePost(id: string) {\n    const fullPath = path.join(postsDirectory, `${id}.md`);\n    fs.unlinkSync(fullPath);\n}\n\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAEzC,SAAS;IACd,sCAAsC;IACtC,MAAM,YAAY,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;IACjC,MAAM,eAAe,UAAU,GAAG,CAAC,CAAC;QAClC,wCAAwC;QACxC,MAAM,KAAK,SAAS,OAAO,CAAC,SAAS;QAErC,+BAA+B;QAC/B,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gBAAgB;QAC3C,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAE/C,qDAAqD;QACrD,MAAM,eAAe,CAAA,GAAA,yIAAA,CAAA,UAAM,AAAD,EAAE;QAE5B,+BAA+B;QAC/B,OAAO;YACL;YACA,GAAI,aAAa,IAAI;QACvB;IACF;IACA,qBAAqB;IACrB,OAAO,aAAa,IAAI,CAAC,CAAC,GAAG;QAC3B,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,EAAE;YACnB,OAAO;QACT,OAAO;YACL,OAAO,CAAC;QACV;IACF;AACF;AAEO,SAAS;IACd,MAAM,YAAY,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;IACjC,OAAO,UAAU,GAAG,CAAC,CAAC;QACpB,OAAO;YACL,QAAQ;gBACN,IAAI,SAAS,OAAO,CAAC,SAAS;YAChC;QACF;IACF;AACF;AAEO,eAAe,YAAY,EAAU;IAC1C,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,GAAG,GAAG,CAAC;IACrD,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAE/C,qDAAqD;IACrD,MAAM,eAAe,CAAA,GAAA,yIAAA,CAAA,UAAM,AAAD,EAAE;IAE5B,kDAAkD;IAClD,MAAM,mBAAmB,MAAM,CAAA,GAAA,iIAAA,CAAA,SAAM,AAAD,IACjC,GAAG,CAAC,gJAAA,CAAA,UAAI,EACR,OAAO,CAAC,aAAa,OAAO;IAC/B,MAAM,cAAc,iBAAiB,QAAQ;IAE7C,+CAA+C;IAC/C,OAAO;QACL;QACA;QACA,GAAI,aAAa,IAAI;IACvB;AACF;AAEO,SAAS,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAoD;IACjG,MAAM,KAAK,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ;IAC/C,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,GAAG,GAAG,CAAC;IAErD,MAAM,cAAc,CAAC;QACjB,EAAE,MAAM;OACT,EAAE,KAAK;;;AAGd,EAAE,SAAS;IAEP,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU;IAE3B,OAAO;QAAE;IAAG;AAChB;AAEO,SAAS,WAAW,EAAU,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAoD;IAC7G,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,GAAG,GAAG,CAAC;IAErD,MAAM,cAAc,CAAC;QACjB,EAAE,MAAM;OACT,EAAE,KAAK;;;AAGd,EAAE,SAAS;IAEP,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU;IAE3B,OAAO;QAAE;IAAG;AAChB;AAEO,SAAS,WAAW,EAAU;IACjC,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,GAAG,GAAG,CAAC;IACrD,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///Users/phamnhat/Documents/plnatoic-cloud/src/app/api/posts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getSortedPostsData, createPost } from '@/lib/posts';\n\nexport async function GET() {\n  try {\n    const allPostsData = getSortedPostsData();\n    return NextResponse.json(allPostsData);\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    return NextResponse.json({ error: 'Failed to fetch posts' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { title, content } = await request.json();\n\n    if (!title || !content) {\n      return NextResponse.json({ error: 'Missing required fields: title and content' }, { status: 400 });\n    }\n\n    const date = new Date().toISOString().split('T')[0]; // Format as YYYY-MM-DD\n    const newPost = createPost({ title, date, content });\n\n    return NextResponse.json(newPost, { status: 201 });\n  } catch (error) {\n    console.error('Error creating post:', error);\n    return NextResponse.json({ error: 'Failed to create post' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,eAAe,CAAA,GAAA,qHAAA,CAAA,qBAAkB,AAAD;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE7C,IAAI,CAAC,SAAS,CAAC,SAAS;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6C,GAAG;gBAAE,QAAQ;YAAI;QAClG;QAEA,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,uBAAuB;QAC5E,MAAM,UAAU,CAAA,GAAA,qHAAA,CAAA,aAAU,AAAD,EAAE;YAAE;YAAO;YAAM;QAAQ;QAElD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}