{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/phamnhat/Documents/plnatoic-cloud/src/lib/db.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\n\n// Initialize the Neon database client\n// The DATABASE_URL is read from the .env.development.local file\nexport const sql = neon(process.env.DATABASE_URL!);\n"],"names":[],"mappings":";;;AAAA;;AAIO,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///Users/phamnhat/Documents/plnatoic-cloud/src/app/api/posts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { sql } from '@/lib/db';\n\n// GET all blog posts\nexport async function GET() {\n  try {\n    const posts = await sql`SELECT id, slug, title, created_at FROM posts ORDER BY created_at DESC`;\n    return NextResponse.json(posts);\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    return NextResponse.json({ error: 'Failed to fetch posts' }, { status: 500 });\n  }\n}\n\n// POST a new blog post\nexport async function POST(request: NextRequest) {\n  try {\n    const { title, content } = await request.json();\n\n    if (!title || !content) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    // Create a URL-friendly slug from the title\n    const slug = title.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n\n    const result = await sql`\n      INSERT INTO posts (title, content, slug)\n      VALUES (${title}, ${content}, ${slug})\n      RETURNING id, slug;\n    `;\n\n    return NextResponse.json(result[0], { status: 201 });\n  } catch (error) {\n    console.error('Error creating post:', error);\n    // Check for unique constraint violation (duplicate slug)\n    if (error instanceof Error && error.message.includes('duplicate key value violates unique constraint')) {\n        return NextResponse.json({ error: 'A post with this title already exists.' }, { status: 409 });\n    }\n    return NextResponse.json({ error: 'Failed to create post' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,kHAAA,CAAA,MAAG,CAAC,sEAAsE,CAAC;QAC/F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE7C,IAAI,CAAC,SAAS,CAAC,SAAS;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,4CAA4C;QAC5C,MAAM,OAAO,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,eAAe;QAE7E,MAAM,SAAS,MAAM,kHAAA,CAAA,MAAG,CAAC;;cAEf,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,KAAK;;IAEvC,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,yDAAyD;QACzD,IAAI,iBAAiB,SAAS,MAAM,OAAO,CAAC,QAAQ,CAAC,mDAAmD;YACpG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyC,GAAG;gBAAE,QAAQ;YAAI;QAChG;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}