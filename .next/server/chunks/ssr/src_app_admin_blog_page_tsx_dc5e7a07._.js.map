{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/phamnhat/Documents/plnatoic-cloud/src/app/admin/blog/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, FormEvent } from 'react';\n\n// Interface matches the data structure from the database\ninterface Post {\n  id: number;\n  slug: string;\n  title: string;\n  created_at: string;\n  content?: string; // Content is optional\n}\n\nexport default function AdminBlogPage() {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Form state\n  const [currentPost, setCurrentPost] = useState<Partial<Post> | null>(null);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n\n  // Fetch all posts\n  const fetchPosts = async () => {\n    setIsLoading(true);\n    try {\n      const res = await fetch('/api/posts');\n      if (!res.ok) throw new Error('Failed to fetch posts');\n      const data = await res.json();\n      setPosts(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const handleEdit = (post: Post) => {\n    setCurrentPost(post);\n    setTitle(post.title);\n    // Fetch full content for the selected post by its slug\n    fetch(`/api/posts/${post.slug}`)\n      .then(res => res.json())\n      .then(data => setContent(data.content || ''))\n      .catch(() => setContent('Error loading content.'));\n  };\n\n  const handleDelete = async (slug: string) => {\n    if (window.confirm('Are you sure you want to delete this post?')) {\n      try {\n        const res = await fetch(`/api/posts/${slug}`, { method: 'DELETE' });\n        if (!res.ok) {\n            const errorData = await res.json();\n            throw new Error(errorData.error || 'Failed to delete post');\n        }\n        fetchPosts(); // Refresh list\n      } catch (err) {\n        alert(err instanceof Error ? err.message : 'An unknown error occurred');\n      }\n    }\n  };\n\n  const handleFormSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    const method = currentPost ? 'PUT' : 'POST';\n    const url = currentPost ? `/api/posts/${currentPost.slug}` : '/api/posts';\n\n    try {\n      const res = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title, content }),\n      });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || 'Failed to save post');\n      }\n      \n      // Reset form and refresh list\n      setCurrentPost(null);\n      setTitle('');\n      setContent('');\n      fetchPosts();\n    } catch (err) {\n      alert(err instanceof Error ? err.message : 'An unknown error occurred');\n    }\n  };\n  \n  const handleCancelEdit = () => {\n    setCurrentPost(null);\n    setTitle('');\n    setContent('');\n  }\n\n  if (isLoading) return <div className=\"container mx-auto p-4\">Loading...</div>;\n  if (error) return <div className=\"container mx-auto p-4\">Error: {error}</div>;\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Blog Admin</h1>\n\n      {/* Form for creating/editing posts */}\n      <div className=\"mb-8 p-4 border rounded-lg bg-gray-900\">\n        <h2 className=\"text-xl font-semibold mb-2\">{currentPost ? 'Edit Post' : 'Create New Post'}</h2>\n        <form onSubmit={handleFormSubmit}>\n          <div className=\"mb-4\">\n            <label htmlFor=\"title\" className=\"block mb-1 font-medium\">Title</label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              className=\"w-full p-2 border rounded bg-gray-800 text-white border-gray-600 focus:ring-blue-500 focus:border-blue-500\"\n              required\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label htmlFor=\"content\" className=\"block mb-1 font-medium\">Content</label>\n            <textarea\n              id=\"content\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              className=\"w-full p-2 border rounded h-64 bg-gray-800 text-white border-gray-600 focus:ring-blue-500 focus:border-blue-500\"\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors\">\n            {currentPost ? 'Update Post' : 'Create Post'}\n          </button>\n          {currentPost && (\n            <button type=\"button\" onClick={handleCancelEdit} className=\"ml-2 bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition-colors\">\n              Cancel Edit\n            </button>\n          )}\n        </form>\n      </div>\n\n      {/* List of posts */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-2\">Existing Posts</h2>\n        <ul className=\"border rounded-lg bg-gray-900 border-gray-700\">\n          {posts.map((post, index) => (\n            <li key={post.id} className={`flex justify-between items-center p-3 ${index < posts.length - 1 ? 'border-b border-gray-700' : ''}`}>\n              <div>\n                <span className=\"font-semibold\">{post.title}</span>\n                <span className=\"text-sm text-gray-400 ml-2\">({new Date(post.created_at).toLocaleDateString()})</span>\n              </div>\n              <div>\n                <button onClick={() => handleEdit(post)} className=\"bg-yellow-500 text-white px-3 py-1 rounded mr-2 hover:bg-yellow-600 transition-colors\">Edit</button>\n                <button onClick={() => handleDelete(post.slug)} className=\"bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition-colors\">Delete</button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAae,SAAS;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,aAAa;IACb,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAwB;IACrE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,kBAAkB;IAClB,MAAM,aAAa;QACjB,aAAa;QACb,IAAI;YACF,MAAM,MAAM,MAAM,MAAM;YACxB,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;YAC7B,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,SAAS;QACX,EAAE,OAAO,KAAK;YACZ,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,SAAU;YACR,aAAa;QACf;IACF;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,MAAM,aAAa,CAAC;QAClB,eAAe;QACf,SAAS,KAAK,KAAK;QACnB,uDAAuD;QACvD,MAAM,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE,EAC5B,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,IACpB,IAAI,CAAC,CAAA,OAAQ,WAAW,KAAK,OAAO,IAAI,KACxC,KAAK,CAAC,IAAM,WAAW;IAC5B;IAEA,MAAM,eAAe,OAAO;QAC1B,IAAI,OAAO,OAAO,CAAC,+CAA+C;YAChE,IAAI;gBACF,MAAM,MAAM,MAAM,MAAM,CAAC,WAAW,EAAE,MAAM,EAAE;oBAAE,QAAQ;gBAAS;gBACjE,IAAI,CAAC,IAAI,EAAE,EAAE;oBACT,MAAM,YAAY,MAAM,IAAI,IAAI;oBAChC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI;gBACvC;gBACA,cAAc,eAAe;YAC/B,EAAE,OAAO,KAAK;gBACZ,MAAM,eAAe,QAAQ,IAAI,OAAO,GAAG;YAC7C;QACF;IACF;IAEA,MAAM,mBAAmB,OAAO;QAC9B,EAAE,cAAc;QAChB,MAAM,SAAS,cAAc,QAAQ;QACrC,MAAM,MAAM,cAAc,CAAC,WAAW,EAAE,YAAY,IAAI,EAAE,GAAG;QAE7D,IAAI;YACF,MAAM,MAAM,MAAM,MAAM,KAAK;gBAC3B;gBACA,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAO;gBAAQ;YACxC;YACA,IAAI,CAAC,IAAI,EAAE,EAAE;gBACX,MAAM,YAAY,MAAM,IAAI,IAAI;gBAChC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI;YACrC;YAEA,8BAA8B;YAC9B,eAAe;YACf,SAAS;YACT,WAAW;YACX;QACF,EAAE,OAAO,KAAK;YACZ,MAAM,eAAe,QAAQ,IAAI,OAAO,GAAG;QAC7C;IACF;IAEA,MAAM,mBAAmB;QACvB,eAAe;QACf,SAAS;QACT,WAAW;IACb;IAEA,IAAI,WAAW,qBAAO,8OAAC;QAAI,WAAU;kBAAwB;;;;;;IAC7D,IAAI,OAAO,qBAAO,8OAAC;QAAI,WAAU;;YAAwB;YAAQ;;;;;;;IAEjE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BAGxC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA8B,cAAc,cAAc;;;;;;kCACxE,8OAAC;wBAAK,UAAU;;0CACd,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,SAAQ;wCAAQ,WAAU;kDAAyB;;;;;;kDAC1D,8OAAC;wCACC,IAAG;wCACH,MAAK;wCACL,OAAO;wCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;wCACxC,WAAU;wCACV,QAAQ;;;;;;;;;;;;0CAGZ,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,SAAQ;wCAAU,WAAU;kDAAyB;;;;;;kDAC5D,8OAAC;wCACC,IAAG;wCACH,OAAO;wCACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;wCAC1C,WAAU;wCACV,QAAQ;;;;;;;;;;;;0CAGZ,8OAAC;gCAAO,MAAK;gCAAS,WAAU;0CAC7B,cAAc,gBAAgB;;;;;;4BAEhC,6BACC,8OAAC;gCAAO,MAAK;gCAAS,SAAS;gCAAkB,WAAU;0CAAoF;;;;;;;;;;;;;;;;;;0BAQrJ,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC;wBAAG,WAAU;kCACX,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,8OAAC;gCAAiB,WAAW,CAAC,sCAAsC,EAAE,QAAQ,MAAM,MAAM,GAAG,IAAI,6BAA6B,IAAI;;kDAChI,8OAAC;;0DACC,8OAAC;gDAAK,WAAU;0DAAiB,KAAK,KAAK;;;;;;0DAC3C,8OAAC;gDAAK,WAAU;;oDAA6B;oDAAE,IAAI,KAAK,KAAK,UAAU,EAAE,kBAAkB;oDAAG;;;;;;;;;;;;;kDAEhG,8OAAC;;0DACC,8OAAC;gDAAO,SAAS,IAAM,WAAW;gDAAO,WAAU;0DAAwF;;;;;;0DAC3I,8OAAC;gDAAO,SAAS,IAAM,aAAa,KAAK,IAAI;gDAAG,WAAU;0DAA6E;;;;;;;;;;;;;+BAPlI,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;AAe5B","debugId":null}}]
}